// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<MyStruct> create_my(
    int index,
    int isolate_hash,
  ) {
    return _create_my(
      index,
      isolate_hash,
    );
  }

  late final _create_myPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MyStruct> Function(
              ffi.UintPtr, ffi.IntPtr)>>('create_my');
  late final _create_my = _create_myPtr
      .asFunction<ffi.Pointer<MyStruct> Function(int, int)>(isLeaf: true);

  /// # Safety
  /// - `ptr` should be from [`create`]
  void free_my(
    ffi.Pointer<MyStruct> ptr,
  ) {
    return _free_my(
      ptr,
    );
  }

  late final free_myPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MyStruct>)>>(
          'free_my');
  late final _free_my = free_myPtr
      .asFunction<void Function(ffi.Pointer<MyStruct>)>(isLeaf: true);

  /// # Safety
  bool init_my(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _init_my(
      data,
    );
  }

  late final _init_myPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<ffi.Void>)>>(
          'init_my');
  late final _init_my = _init_myPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Void>)>(isLeaf: true);

  /// # Safety
  void set_finalizable(
    Object capability,
    ffi.Pointer<ffi.Void> ptr,
    int external_allocation_size,
    ffi.Pointer<
            ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void> ptr)>>
        callback,
  ) {
    return _set_finalizable(
      capability,
      ptr,
      external_allocation_size,
      callback,
    );
  }

  late final _set_finalizablePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Handle,
              ffi.Pointer<ffi.Void>,
              ffi.IntPtr,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Void Function(
                          ffi.Pointer<ffi.Void> ptr)>>)>>('set_finalizable');
  late final _set_finalizable = _set_finalizablePtr.asFunction<
      void Function(
          Object,
          ffi.Pointer<ffi.Void>,
          int,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Void Function(ffi.Pointer<ffi.Void> ptr)>>)>();
}

final class MyStruct extends ffi.Struct {
  @ffi.UintPtr()
  external int index;

  @ffi.IntPtr()
  external int isolate_hash;
}
